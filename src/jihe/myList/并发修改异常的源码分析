public interface List<E>{
    Iterator<E> iterator();
     boolean add(E e);
}
public abstract class AbstractList<E>{//ArrayList的父类
    protected  int modCount = 0;//该变量modCount可以被子类继承
}
public class ArrayList<E> extends AbstractList<E> implements List<E>{

     public E get(int index) {//get方法并没有判断与其修改次数与实际修改次数是否一致
             Objects.checkIndex(index, size);
             return elementData(index);
         }

     public boolean add(E e) {
            modCount++;//但在这如果调用了add方法，modCount++了
            add(e, elementData, size);
            return true;
        }

    public Iterator<E> iterator() {
            return new Itr();
        }
    private class Itr implements Iterator<E> {

            int expectedModCount = modCount;//原本expectedModCount和modCount都是初始值为0
            /*
                modCount:实际修改集合的次数
                expectedModCount:预期修改集合的次数
            */
            public E next() {
                checkForComodification();
                int i = cursor;
                if (i >= size)
                    throw new NoSuchElementException();
                Object[] elementData = ArrayList.this.elementData;
                if (i >= elementData.length)
                    throw new ConcurrentModificationException();
                cursor = i + 1;
                return (E) elementData[lastRet = i];
            }

            final void checkForComodification() {
                if (modCount != expectedModCount)//预期修改与实际修改不相等，则抛出异常
                    throw new ConcurrentModificationException();
            }
        }
}